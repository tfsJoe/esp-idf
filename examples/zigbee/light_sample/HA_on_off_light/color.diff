diff --git a/examples/zigbee/light_sample/HA_on_off_light/main/esp_zb_light.c b/examples/zigbee/light_sample/HA_on_off_light/main/esp_zb_light.c
index 0b44466165..40aae9d128 100644
--- a/examples/zigbee/light_sample/HA_on_off_light/main/esp_zb_light.c
+++ b/examples/zigbee/light_sample/HA_on_off_light/main/esp_zb_light.c
@@ -23,7 +23,7 @@
 #error Define ZB_ED_ROLE in idf.py menuconfig to compile light (End Device) source code.
 #endif
 
-static const char *TAG = "ESP_ZB_ON_OFF_LIGHT";
+static const char *TAG = "ESP_ZB_COLOR_J";
 /********************* Define functions **************************/
 static esp_err_t deferred_driver_init(void)
 {
@@ -93,16 +93,36 @@ static esp_err_t zb_attribute_handler(const esp_zb_zcl_set_attr_value_message_t
     ESP_LOGI(TAG, "Received message: endpoint(%d), cluster(0x%x), attribute(0x%x), data size(%d)", message->info.dst_endpoint, message->info.cluster,
              message->attribute.id, message->attribute.data.size);
 
-    if (message->info.dst_endpoint == HA_ESP_LIGHT_ENDPOINT) {
-        if (message->info.cluster == ESP_ZB_ZCL_CLUSTER_ID_ON_OFF) {
-            if (message->attribute.id == ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID && message->attribute.data.type == ESP_ZB_ZCL_ATTR_TYPE_BOOL) {
+    if (message->info.dst_endpoint == HA_ESP_LIGHT_ENDPOINT)
+    {
+        if (message->info.cluster == ESP_ZB_ZCL_CLUSTER_ID_ON_OFF)
+        {
+            if (message->attribute.id == ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID && message->attribute.data.type == ESP_ZB_ZCL_ATTR_TYPE_BOOL)
+            {
                 light_state = message->attribute.data.value ? *(bool *)message->attribute.data.value : light_state;
-                ESP_LOGI(TAG, "Light sets to %s", light_state ? "On" : "Off");
+                ESP_LOGI(TAG, "Light set to %s", light_state ? "On" : "Off");
                 light_driver_set_power(light_state);
             }
         }
+        else if (message->info.cluster == ESP_ZB_ZCL_CLUSTER_ID_COLOR_CONTROL) 
+        {
+          
+          uint32_t *rgb_values = (uint32_t *)message->attribute.data.value;
+
+          uint32_t red = rgb_values[0];   // R value
+          uint32_t green = rgb_values[1]; // G value
+          uint32_t blue = rgb_values[2];  // B value
+
+          ESP_LOGI(TAG, "Color set to: R=%lu, G=%lu, B=%lu", red, green, blue);
+
+          light_driver_set_color(red, green, blue);
+        }
+        else if (message->info.cluster == ESP_ZB_ZCL_CLUSTER_ID_IDENTIFY)
+        {
+          ESP_LOGI(TAG, "Identification requested.");
+        }
     }
-    if (message->info.dst_endpoint == HA_ESP_LIGHT_ENDPOINT)
+    // if (message->info.dst_endpoint == HA_ESP_LIGHT_ENDPOINT)
     return ret;
 }
 
@@ -111,6 +131,7 @@ static esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id,
     esp_err_t ret = ESP_OK;
     switch (callback_id) {
     case ESP_ZB_CORE_SET_ATTR_VALUE_CB_ID:
+        ESP_LOGI(TAG, "Receive Zigbee action(0x%x) callback", callback_id);
         ret = zb_attribute_handler((esp_zb_zcl_set_attr_value_message_t *)message);
         break;
     default:
@@ -125,15 +146,15 @@ static void esp_zb_task(void *pvParameters)
     /* initialize Zigbee stack */
     esp_zb_cfg_t zb_nwk_cfg = ESP_ZB_ZED_CONFIG();
     esp_zb_init(&zb_nwk_cfg);
-    esp_zb_on_off_light_cfg_t light_cfg = ESP_ZB_DEFAULT_ON_OFF_LIGHT_CONFIG();
-    esp_zb_ep_list_t *esp_zb_on_off_light_ep = esp_zb_on_off_light_ep_create(HA_ESP_LIGHT_ENDPOINT, &light_cfg);
+    esp_zb_color_dimmable_light_cfg_t light_cfg = ESP_ZB_DEFAULT_COLOR_DIMMABLE_LIGHT_CONFIG();
+    esp_zb_ep_list_t *esp_zb_color_dimmable_light_ep = esp_zb_color_dimmable_light_ep_create(HA_ESP_LIGHT_ENDPOINT, &light_cfg);
     zcl_basic_manufacturer_info_t info = {
         .manufacturer_name = ESP_MANUFACTURER_NAME,
         .model_identifier = ESP_MODEL_IDENTIFIER,
     };
 
-    esp_zcl_utility_add_ep_basic_manufacturer_info(esp_zb_on_off_light_ep, HA_ESP_LIGHT_ENDPOINT, &info);
-    esp_zb_device_register(esp_zb_on_off_light_ep);
+    esp_zcl_utility_add_ep_basic_manufacturer_info(esp_zb_color_dimmable_light_ep, HA_ESP_LIGHT_ENDPOINT, &info);
+    esp_zb_device_register(esp_zb_color_dimmable_light_ep);
     esp_zb_core_action_handler_register(zb_action_handler);
     esp_zb_set_primary_network_channel_set(ESP_ZB_PRIMARY_CHANNEL_MASK);
     ESP_ERROR_CHECK(esp_zb_start(false));
